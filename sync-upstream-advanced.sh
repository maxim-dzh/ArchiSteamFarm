#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
UPSTREAM_URL="https://github.com/JustArchiNET/ArchiSteamFarm.git"
MAIN_BRANCH="main"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
FORCE_SYNC=false
SKIP_REBASE=false
DRY_RUN=false
UPDATE_SUBMODULES=true
FEATURE_BRANCH="feature-1"

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--force) FORCE_SYNC=true; shift ;;
        -s|--skip-rebase) SKIP_REBASE=true; shift ;;
        -d|--dry-run) DRY_RUN=true; shift ;;
        -n|--no-submodules) UPDATE_SUBMODULES=false; shift ;;
        -b|--branch) FEATURE_BRANCH="$2"; shift 2 ;;
        -h|--help)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [OPTIONS]"
            echo ""
            echo "–û–ø—Ü–∏–∏:"
            echo "  -f, --force           –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"
            echo "  -s, --skip-rebase     –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å rebase feature –≤–µ—Ç–∫–∏"
            echo "  -d, --dry-run         –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ"
            echo "  -n, --no-submodules   –ù–µ –æ–±–Ω–æ–≤–ª—è—Ç—å submodules"
            echo "  -b, --branch BRANCH   –£–∫–∞–∑–∞—Ç—å feature –≤–µ—Ç–∫—É –¥–ª—è rebase"
            echo "  -h, --help            –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
            exit 0
            ;;
        *) print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"; exit 1 ;;
    esac
done

print_status "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É–º–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é ArchiSteamFarm + –ø–ª–∞–≥–∏–Ω–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "–ù–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!"
    exit 1
fi

CURRENT_BRANCH=$(git branch --show-current)
print_status "–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: $CURRENT_BRANCH"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
if ! git diff-index --quiet HEAD --; then
    print_warning "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!"
    if [ "$DRY_RUN" = false ]; then
        read -p "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ stash? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git stash push -m "Auto stash before sync $(date)"
            print_success "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ stash"
        else
            print_error "–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            exit 1
        fi
    fi
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ upstream remote
if ! git remote get-url upstream > /dev/null 2>&1; then
    print_status "–î–æ–±–∞–≤–ª—è–µ–º upstream remote..."
    if [ "$DRY_RUN" = false ]; then
        git remote add upstream "$UPSTREAM_URL"
    fi
fi

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
print_status "üì• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º ArchiSteamFarm..."
if [ "$DRY_RUN" = false ]; then
    git fetch upstream
    
    if [ "$CURRENT_BRANCH" != "$MAIN_BRANCH" ]; then
        git checkout "$MAIN_BRANCH"
    fi
    
    if [ "$FORCE_SYNC" = true ]; then
        git reset --hard "upstream/$MAIN_BRANCH"
        git push origin "$MAIN_BRANCH" --force-with-lease
    else
        git merge "upstream/$MAIN_BRANCH" --no-edit
        git push origin "$MAIN_BRANCH"
    fi
fi
print_success "ArchiSteamFarm —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω"

# –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ submodules —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
manage_submodules_smart() {
    if [ "$UPDATE_SUBMODULES" = false ]; then
        print_status "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ submodules"
        return
    fi
    
    print_status "üîß –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ submodules..."
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö submodules
    git submodule foreach --quiet 'echo $name' | while read submodule_name; do
        if [ -z "$submodule_name" ]; then
            continue
        fi
        
        print_status "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º submodule: $submodule_name"
        
        if [ -d "$submodule_name" ]; then
            cd "$submodule_name"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if ! git diff-index --quiet HEAD --; then
                print_warning "–í $submodule_name –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!"
                print_status "–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ stash..."
                git stash push -m "Auto stash before submodule update $(date)"
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã
            UPSTREAM_COMMITS=$(git rev-list --count HEAD..origin/HEAD 2>/dev/null || echo "0")
            LOCAL_COMMITS=$(git rev-list --count origin/HEAD..HEAD 2>/dev/null || echo "0")
            
            if [ "$LOCAL_COMMITS" -gt 0 ]; then
                print_warning "–í $submodule_name –µ—Å—Ç—å $LOCAL_COMMITS –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤!"
                print_status "–°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
                
                # –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
                BACKUP_BRANCH="local-changes-$(date +%Y%m%d-%H%M%S)"
                git checkout -b "$BACKUP_BRANCH"
                print_success "–õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –≤–µ—Ç–∫—É: $BACKUP_BRANCH"
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ç–∫—É
                git checkout main || git checkout master
            fi
            
            # –û–±–Ω–æ–≤–ª—è–µ–º submodule
            print_status "–û–±–Ω–æ–≤–ª—è–µ–º $submodule_name..."
            git fetch origin
            git reset --hard origin/HEAD
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stash –µ—Å–ª–∏ –±—ã–ª
            if git stash list | grep -q "Auto stash before submodule update"; then
                print_status "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è..."
                if git stash pop; then
                    print_success "–õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
                else
                    print_warning "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é."
                fi
            fi
            
            cd ..
        fi
    done
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ submodules –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    if [ "$DRY_RUN" = false ]; then
        git submodule update --init --recursive
    fi
}

# –í—ã–∑—ã–≤–∞–µ–º —É–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ submodules
if [ "$DRY_RUN" = false ]; then
    manage_submodules_smart
fi

# –†–µ–±–µ–π–∑–∏–º feature –≤–µ—Ç–∫—É
if [ -n "$FEATURE_BRANCH" ] && [ "$SKIP_REBASE" = false ]; then
    if git show-ref --verify --quiet "refs/heads/$FEATURE_BRANCH"; then
        print_status "üîÑ –†–µ–±–µ–π–∑–∏–º feature –≤–µ—Ç–∫—É: $FEATURE_BRANCH"
        if [ "$DRY_RUN" = false ]; then
            git checkout "$FEATURE_BRANCH"
            if ! git rebase "$MAIN_BRANCH"; then
                print_error "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ rebase!"
                exit 1
            fi
        fi
        print_success "Feature –≤–µ—Ç–∫–∞ –ø–µ—Ä–µ–±–∞–∑–∏—Ä–æ–≤–∞–Ω–∞"
    fi
elif [ "$CURRENT_BRANCH" != "$MAIN_BRANCH" ] && [ "$SKIP_REBASE" = false ]; then
    print_status "üîÑ –†–µ–±–µ–π–∑–∏–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É: $CURRENT_BRANCH"
    if [ "$DRY_RUN" = false ]; then
        git checkout "$CURRENT_BRANCH"
        if ! git rebase "$MAIN_BRANCH"; then
            print_error "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ rebase!"
            exit 1
        fi
    fi
    print_success "–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞ –ø–µ—Ä–µ–±–∞–∑–∏—Ä–æ–≤–∞–Ω–∞"
fi

# –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é –≤–µ—Ç–∫—É
if [ "$CURRENT_BRANCH" != "$MAIN_BRANCH" ]; then
    if [ "$DRY_RUN" = false ]; then
        git checkout "$CURRENT_BRANCH"
    fi
fi

print_success "‚úÖ –£–º–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
print_status "üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:"
if [ "$DRY_RUN" = false ]; then
    echo "üìÅ –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:"
    git status --short
    
    echo ""
    echo "üìã Submodules:"
    git submodule status
    
    echo ""
    echo "üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã –≤ main:"
    git log --oneline -3 "$MAIN_BRANCH"
fi

print_status "üí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å submodules:"
echo "  –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–µ—Ç–∫–∏ –≤ submodule:  cd ASFEnhance && git branch -a"
echo "  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è:                  cd ASFEnhance && git stash pop"
echo "  –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ç–∫—É:        cd ASFEnhance && git checkout local-changes-*"
echo "  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å submodule:        git submodule update --force ASFEnhance" 